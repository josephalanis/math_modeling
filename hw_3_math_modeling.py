# -*- coding: utf-8 -*-
"""HW_3_Math_Modeling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17PkFClnw22QZvIXNZ_Kcjau4A9_sicgX
"""



import numpy as np
import matplotlib.pyplot as plt

def bacteria_compare(simulations, title='Solutions'):
    plt.figure(figsize=(12, 8))

    for sim in simulations:
        # Parameters
        L = 10.0
        Nx = 100
        Dt = 0.001
        Nt = 500
        D = sim["D"]
        r = sim["r"]
        k = sim["k"]
        label = sim.get("label", f"{D}, {r}, {k}")

        dx = L / Nx
        x = np.linspace(0, L, Nx)
        u = np.zeros(Nx)
        u[-1] = k  # Boundary condition at right end

        # Time-stepping loop
        for _ in range(Nt):
            u_new = np.copy(u)

            # Vectorized update for interior points
            u_new[1:-1] = u[1:-1] + Dt * (
                D * (u[:-2] - 2 * u[1:-1] + u[2:]) / dx**2 + r * u[1:-1] * (1 - u[1:-1] / k)
            )

            u = u_new  # Update solution for next iteration

        plt.plot(x, u, label=label)

    plt.xlabel("Position x")
    plt.ylabel("Density u(x, t)")
    plt.title(title)
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Define different sets of parameters for simulations
parameter_sets = [
    {
        "title": "Solutions (Different D)",
        "param_values": [0.05, 0.5, 1.0, 2.0],
        "variable": "D",
        "fixed_params": {"r": 0.5, "k": 1.0}
    },
    {
        "title": "Solutions (Different r)",
        "param_values": [1.0, 5.0, 10.0, 20.0],
        "variable": "r",
        "fixed_params": {"D": 1.0, "k": 1.0}
    },
    {
        "title": "Solutions (Different k)",
        "param_values": [1.0, 10.0, 20.0, 50.0],
        "variable": "k",
        "fixed_params": {"D": 1, "r": 0.5}
    }
]

# Run simulations dynamically
for param_set in parameter_sets:
    simulations = [
        {param_set["variable"]: val, **param_set["fixed_params"], "label": f"{param_set['variable']} = {val}"}
        for val in param_set["param_values"]
    ]
    bacteria_compare(simulations, title=param_set["title"])

import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

font = {'weight' : 'bold',
        'size'   : 12}
plt.rc('font', **font)

# model parameters
m = 30     # mass (kg)
g=9.81 #Gravity
mu=0.04   #Coulomb friction coefficient
k = 750     # spring constant (N/m)
gamma = 0.04  # damping coefficient (kg/s)
x0 = 0.72     # initial position (m)
v0 = 0. # initial velocity (m/s)
y0 = [x0, v0]

# numerical paramters
T_end = 10 # (s)
n_steps = 50000
t_span = (0, T_end)
t_eval = np.linspace(t_span[0], t_span[1], n_steps)

#from question 5
def system(t, y):
    x, v = y
    friction=-mu*m*g*np.sign(v)
    drag=-gamma *v*abs(v)
    spring_force=-k*x
    total_force=friction+drag+spring_force
    a=total_force/m #acceleration
    return [v,a]


sol = solve_ivp(system, t_span, y0, t_eval = t_eval, method='RK45')

# position plot
plt.plot(sol.t, sol.y[0], label="num")
plt.plot(sol.t, y_ex, label="ex")
plt.xlabel('Time (s)')
plt.ylabel('Position (m)')
plt.legend()
plt.show()

# velocity plot
plt.plot(sol.t, sol.y[1])
plt.xlabel('Time (s)')
plt.ylabel('Velocity (m/s)')
plt.show()

#creating xdat from text file
xdat=[-0.2001, -0.1961, -0.1843, -0.1656, -0.1402, -0.1097, -0.0745, -0.0366, 0.0025, 0.0412, 0.0785, 0.1122, 0.1414, 0.1648, 0.1811, 0.1902, 0.192, 0.1859, 0.1726, 0.1524, 0.1264, 0.0958, 0.0612, 0.0242, -0.0135, -0.0504, -0.0852, -0.1164, -0.1428, -0.1635, -0.1773, -0.1836, -0.1826, -0.1748, -0.1602, -0.1386, -0.1123, -0.0814, -0.0476, -0.0118, 0.0244, 0.0592, 0.0915, 0.1202, 0.1437, 0.1612, 0.1724, 0.1764, 0.1729, 0.163, 0.1467, 0.1247, 0.0976, 0.0671, 0.0339, -0.0005, -0.0348, -0.0674, -0.0973, -0.1232, -0.1438, -0.1585, -0.1667, -0.1681, -0.1631, -0.1517, -0.1341, -0.1118, -0.0848, -0.0548, -0.0223, 0.0104, 0.0428, 0.0733, 0.1007, 0.1239, 0.1418, 0.154, 0.1601, 0.1594, 0.1522, 0.139, 0.1207, 0.0977, 0.0706, 0.041, 0.0101, -0.0213, -0.0515, -0.0795, -0.1044, -0.1247, -0.1399, -0.1493, -0.1528, -0.15, -0.1416, -0.1276, -0.1087, -0.0856, -0.0591, -0.0303, -0.0007, 0.0288, 0.0571, 0.083, 0.1052, 0.1231, 0.1361, 0.1433, 0.1445, 0.1402, 0.1304, 0.1154, 0.0959, 0.0731, 0.0472, 0.0194, -0.0085, -0.0364, -0.0625, -0.0859, -0.1056, -0.1209, -0.1315, -0.1367, -0.1361, -0.13, -0.1191, -0.1036, -0.0841, -0.0615, -0.0363, -0.01, 0.0166, 0.0423, 0.0662, 0.0872, 0.1048, 0.1179, 0.1262, 0.1288, 0.1268, 0.1196, 0.1081, 0.0922, 0.0728, 0.0506, 0.0266, 0.0016, -0.0233, -0.0471, -0.0688, -0.0875, -0.1028, -0.1137, -0.1197, -0.121, -0.1174, -0.1094, -0.097, -0.081, -0.0621, -0.0404, -0.0176, 0.006, 0.029, 0.0506, 0.0703, 0.0868, 0.0997, 0.1086, 0.1127, 0.1125, 0.1076, 0.0984, 0.0859, 0.07, 0.051, 0.0307, 0.0089, -0.013, -0.0341, -0.0537, -0.0712, -0.0853, -0.0962, -0.1029, -0.1055, -0.1034, -0.0974, -0.0876, -0.0745, -0.0586, -0.0406, -0.0209, -0.0006, 0.0194, 0.0386, 0.0562, 0.071, 0.0834, 0.0918, 0.0965, 0.0975, 0.0946, 0.0881, 0.0781, 0.0653, 0.0499, 0.033, 0.0146, -0.0042, -0.0227, -0.04, -0.0555, -0.0688, -0.0789, -0.0859, -0.0893, -0.0891, -0.0854, -0.0786, -0.0684, -0.0561, -0.0414, -0.0255, -0.0086, 0.0087, 0.0253, 0.0406, 0.0542, 0.0657, 0.0742, 0.0796, 0.0818, 0.0807, 0.0767, 0.0697, 0.0601, 0.048, 0.0344, 0.0197, 0.004, -0.0113, -0.0265, -0.04, -0.0518, -0.0615, -0.0686, -0.0728, -0.0736, -0.0719, -0.0671, -0.06, -0.0505, -0.0391, -0.0263, -0.0127, 0.0012, 0.0151, 0.0281, 0.0397, 0.05, 0.0578, 0.0631, 0.0658, 0.0657, 0.0629, 0.0577, 0.0503, 0.0413, 0.0306, 0.0189, 0.0065, -0.0058, -0.018, -0.029, -0.0389, -0.047, -0.0531, -0.0568, -0.0583, -0.0574, -0.0541, -0.0489, -0.0419, -0.0333, -0.0237, -0.0133, -0.0022, 0.0084, 0.0189, 0.0283, 0.0363, 0.0427, 0.047, 0.0499, 0.0506, 0.0494, 0.0461, 0.0417, 0.0354, 0.0281, 0.0194, 0.0105, 0.0011, -0.0083, -0.0168, -0.0248, -0.0313, -0.0367, -0.0405, -0.0424, -0.0424, -0.041, -0.038, -0.0338, -0.0282, -0.0219, -0.0147, -0.007, 0.0008, 0.0082, 0.0154, 0.0216, 0.0271, 0.031, 0.0337, 0.0346, 0.0344, 0.0329, 0.03, 0.0264, 0.0217, 0.0163, 0.0105, 0.0043, -0.0021, -0.0078, -0.0131, -0.0179, -0.0219, -0.0247, -0.0265, -0.027, -0.0264, -0.0247, -0.0226, -0.0196, -0.0159, -0.0119, -0.0073, -0.0025, 0.0019, 0.0062, 0.0103, 0.0134, 0.0159, 0.018, 0.019, 0.0192, 0.0186, 0.0175, 0.0159, 0.0136, 0.011, 0.0084, 0.0055, 0.0025, -0.0009, -0.0032, -0.0059, -0.0081, -0.0098, -0.0107, -0.0113, -0.0112, -0.0109, -0.0101, -0.0094, -0.0083, -0.0072, -0.0056, -0.0041, -0.0027, -0.0013, 0.0, 0.0013, 0.002, 0.0029, 0.0032, 0.0033, 0.0036, 0.0034, 0.0032, 0.0033, 0.0033, 0.0034, 0.0036, 0.0032, 0.0035, 0.0034, 0.0034, 0.0035, 0.0034, 0.0034, 0.0034, 0.0033, 0.0034, 0.0036, 0.0035, 0.0033, 0.0033, 0.0032, 0.0034, 0.0033, 0.0033, 0.0036, 0.0036, 0.0033, 0.0033, 0.0034, 0.0033, 0.0034, 0.0033, 0.0033, 0.0034, 0.0035, 0.0032, 0.0033, 0.0033, 0.0034, 0.0035, 0.0035, 0.0034, 0.0033, 0.0035, 0.0033, 0.0032, 0.0035, 0.0034, 0.0034, 0.0033, 0.0034, 0.0034, 0.0034, 0.0033, 0.0034, 0.0032, 0.0032, 0.0033, 0.0034, 0.0033, 0.0033, 0.0032, 0.0034, 0.0033, 0.0032, 0.0033, 0.0032, 0.0033, 0.0035, 0.0032, 0.0034, 0.0032, 0.0034, 0.0035, 0.0034, 0.0035, 0.0033, 0.0032, 0.0033, 0.0033, 0.0033, 0.0034, 0.0031, 0.0032, 0.0033, 0.0033, 0.0034, 0.0036, 0.0033, 0.0032, 0.0034, 0.0034, 0.0033, 0.0034, 0.0033, 0.0033, 0.0032, 0.0033, 0.0034, 0.0033, 0.0032, 0.0034, 0.0032, 0.0034, 0.0034, 0.0031]
xdat=np.array(xdat)
print(xdat)

tdat=[0.0, 0.0401, 0.0802, 0.1202, 0.1603, 0.2004, 0.2405, 0.2806, 0.3206, 0.3607, 0.4008, 0.4409, 0.481, 0.521, 0.5611, 0.6012, 0.6413, 0.6814, 0.7214, 0.7615, 0.8016, 0.8417, 0.8818, 0.9218, 0.9619, 1.002, 1.0421, 1.0822, 1.1222, 1.1623, 1.2024, 1.2425, 1.2826, 1.3226, 1.3627, 1.4028, 1.4429, 1.483, 1.523, 1.5631, 1.6032, 1.6433, 1.6834, 1.7234, 1.7635, 1.8036, 1.8437, 1.8838, 1.9238, 1.9639, 2.004, 2.0441, 2.0842, 2.1242, 2.1643, 2.2044, 2.2445, 2.2846, 2.3246, 2.3647, 2.4048, 2.4449, 2.485, 2.5251, 2.5651, 2.6052, 2.6453, 2.6854, 2.7255, 2.7655, 2.8056, 2.8457, 2.8858, 2.9259, 2.9659, 3.006, 3.0461, 3.0862, 3.1263, 3.1663, 3.2064, 3.2465, 3.2866, 3.3267, 3.3667, 3.4068, 3.4469, 3.487, 3.5271, 3.5671, 3.6072, 3.6473, 3.6874, 3.7275, 3.7675, 3.8076, 3.8477, 3.8878, 3.9279, 3.9679, 4.008, 4.0481, 4.0882, 4.1283, 4.1683, 4.2084, 4.2485, 4.2886, 4.3287, 4.3687, 4.4088, 4.4489, 4.489, 4.5291, 4.5691, 4.6092, 4.6493, 4.6894, 4.7295, 4.7695, 4.8096, 4.8497, 4.8898, 4.9299, 4.9699, 5.01, 5.0501, 5.0902, 5.1303, 5.1703, 5.2104, 5.2505, 5.2906, 5.3307, 5.3707, 5.4108, 5.4509, 5.491, 5.5311, 5.5711, 5.6112, 5.6513, 5.6914, 5.7315, 5.7715, 5.8116, 5.8517, 5.8918, 5.9319, 5.9719, 6.012, 6.0521, 6.0922, 6.1323, 6.1723, 6.2124, 6.2525, 6.2926, 6.3327, 6.3727, 6.4128, 6.4529, 6.493, 6.5331, 6.5731, 6.6132, 6.6533, 6.6934, 6.7335, 6.7735, 6.8136, 6.8537, 6.8938, 6.9339, 6.9739, 7.014, 7.0541, 7.0942, 7.1343, 7.1743, 7.2144, 7.2545, 7.2946, 7.3347, 7.3747, 7.4148, 7.4549, 7.495, 7.5351, 7.5752, 7.6152, 7.6553, 7.6954, 7.7355, 7.7756, 7.8156, 7.8557, 7.8958, 7.9359, 7.976, 8.016, 8.0561, 8.0962, 8.1363, 8.1764, 8.2164, 8.2565, 8.2966, 8.3367, 8.3768, 8.4168, 8.4569, 8.497, 8.5371, 8.5772, 8.6172, 8.6573, 8.6974, 8.7375, 8.7776, 8.8176, 8.8577, 8.8978, 8.9379, 8.978, 9.018, 9.0581, 9.0982, 9.1383, 9.1784, 9.2184, 9.2585, 9.2986, 9.3387, 9.3788, 9.4188, 9.4589, 9.499, 9.5391, 9.5792, 9.6192, 9.6593, 9.6994, 9.7395, 9.7796, 9.8196, 9.8597, 9.8998, 9.9399, 9.98, 10.02, 10.0601, 10.1002, 10.1403, 10.1804, 10.2204, 10.2605, 10.3006, 10.3407, 10.3808, 10.4208, 10.4609, 10.501, 10.5411, 10.5812, 10.6212, 10.6613, 10.7014, 10.7415, 10.7816, 10.8216, 10.8617, 10.9018, 10.9419, 10.982, 11.022, 11.0621, 11.1022, 11.1423, 11.1824, 11.2224, 11.2625, 11.3026, 11.3427, 11.3828, 11.4228, 11.4629, 11.503, 11.5431, 11.5832, 11.6232, 11.6633, 11.7034, 11.7435, 11.7836, 11.8236, 11.8637, 11.9038, 11.9439, 11.984, 12.024, 12.0641, 12.1042, 12.1443, 12.1844, 12.2244, 12.2645, 12.3046, 12.3447, 12.3848, 12.4248, 12.4649, 12.505, 12.5451, 12.5852, 12.6253, 12.6653, 12.7054, 12.7455, 12.7856, 12.8257, 12.8657, 12.9058, 12.9459, 12.986, 13.0261, 13.0661, 13.1062, 13.1463, 13.1864, 13.2265, 13.2665, 13.3066, 13.3467, 13.3868, 13.4269, 13.4669, 13.507, 13.5471, 13.5872, 13.6273, 13.6673, 13.7074, 13.7475, 13.7876, 13.8277, 13.8677, 13.9078, 13.9479, 13.988, 14.0281, 14.0681, 14.1082, 14.1483, 14.1884, 14.2285, 14.2685, 14.3086, 14.3487, 14.3888, 14.4289, 14.4689, 14.509, 14.5491, 14.5892, 14.6293, 14.6693, 14.7094, 14.7495, 14.7896, 14.8297, 14.8697, 14.9098, 14.9499, 14.99, 15.0301, 15.0701, 15.1102, 15.1503, 15.1904, 15.2305, 15.2705, 15.3106, 15.3507, 15.3908, 15.4309, 15.4709, 15.511, 15.5511, 15.5912, 15.6313, 15.6713, 15.7114, 15.7515, 15.7916, 15.8317, 15.8717, 15.9118, 15.9519, 15.992, 16.0321, 16.0721, 16.1122, 16.1523, 16.1924, 16.2325, 16.2725, 16.3126, 16.3527, 16.3928, 16.4329, 16.4729, 16.513, 16.5531, 16.5932, 16.6333, 16.6733, 16.7134, 16.7535, 16.7936, 16.8337, 16.8737, 16.9138, 16.9539, 16.994, 17.0341, 17.0741, 17.1142, 17.1543, 17.1944, 17.2345, 17.2745, 17.3146, 17.3547, 17.3948, 17.4349, 17.4749, 17.515, 17.5551, 17.5952, 17.6353, 17.6754, 17.7154, 17.7555, 17.7956, 17.8357, 17.8758, 17.9158, 17.9559, 17.996, 18.0361, 18.0762, 18.1162, 18.1563, 18.1964, 18.2365, 18.2766, 18.3166, 18.3567, 18.3968, 18.4369, 18.477, 18.517, 18.5571, 18.5972, 18.6373, 18.6774, 18.7174, 18.7575, 18.7976, 18.8377, 18.8778, 18.9178, 18.9579, 18.998, 19.0381, 19.0782, 19.1182, 19.1583, 19.1984, 19.2385, 19.2786, 19.3186, 19.3587, 19.3988, 19.4389, 19.479, 19.519, 19.5591, 19.5992, 19.6393, 19.6794, 19.7194, 19.7595, 19.7996, 19.8397, 19.8798, 19.9198, 19.9599, 20.0]
tdat=np.array(tdat)
print(tdat)

import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
from scipy . integrate import solve_ivp
from scipy . optimize import minimize

font = {'weight' : 'bold',
        'size'   : 12}
plt.rc('font', **font)

#importing information

xdat=[-0.2001, -0.1961, -0.1843, -0.1656, -0.1402, -0.1097, -0.0745, -0.0366, 0.0025, 0.0412, 0.0785, 0.1122, 0.1414, 0.1648, 0.1811, 0.1902, 0.192, 0.1859, 0.1726, 0.1524, 0.1264, 0.0958, 0.0612, 0.0242, -0.0135, -0.0504, -0.0852, -0.1164, -0.1428, -0.1635, -0.1773, -0.1836, -0.1826, -0.1748, -0.1602, -0.1386, -0.1123, -0.0814, -0.0476, -0.0118, 0.0244, 0.0592, 0.0915, 0.1202, 0.1437, 0.1612, 0.1724, 0.1764, 0.1729, 0.163, 0.1467, 0.1247, 0.0976, 0.0671, 0.0339, -0.0005, -0.0348, -0.0674, -0.0973, -0.1232, -0.1438, -0.1585, -0.1667, -0.1681, -0.1631, -0.1517, -0.1341, -0.1118, -0.0848, -0.0548, -0.0223, 0.0104, 0.0428, 0.0733, 0.1007, 0.1239, 0.1418, 0.154, 0.1601, 0.1594, 0.1522, 0.139, 0.1207, 0.0977, 0.0706, 0.041, 0.0101, -0.0213, -0.0515, -0.0795, -0.1044, -0.1247, -0.1399, -0.1493, -0.1528, -0.15, -0.1416, -0.1276, -0.1087, -0.0856, -0.0591, -0.0303, -0.0007, 0.0288, 0.0571, 0.083, 0.1052, 0.1231, 0.1361, 0.1433, 0.1445, 0.1402, 0.1304, 0.1154, 0.0959, 0.0731, 0.0472, 0.0194, -0.0085, -0.0364, -0.0625, -0.0859, -0.1056, -0.1209, -0.1315, -0.1367, -0.1361, -0.13, -0.1191, -0.1036, -0.0841, -0.0615, -0.0363, -0.01, 0.0166, 0.0423, 0.0662, 0.0872, 0.1048, 0.1179, 0.1262, 0.1288, 0.1268, 0.1196, 0.1081, 0.0922, 0.0728, 0.0506, 0.0266, 0.0016, -0.0233, -0.0471, -0.0688, -0.0875, -0.1028, -0.1137, -0.1197, -0.121, -0.1174, -0.1094, -0.097, -0.081, -0.0621, -0.0404, -0.0176, 0.006, 0.029, 0.0506, 0.0703, 0.0868, 0.0997, 0.1086, 0.1127, 0.1125, 0.1076, 0.0984, 0.0859, 0.07, 0.051, 0.0307, 0.0089, -0.013, -0.0341, -0.0537, -0.0712, -0.0853, -0.0962, -0.1029, -0.1055, -0.1034, -0.0974, -0.0876, -0.0745, -0.0586, -0.0406, -0.0209, -0.0006, 0.0194, 0.0386, 0.0562, 0.071, 0.0834, 0.0918, 0.0965, 0.0975, 0.0946, 0.0881, 0.0781, 0.0653, 0.0499, 0.033, 0.0146, -0.0042, -0.0227, -0.04, -0.0555, -0.0688, -0.0789, -0.0859, -0.0893, -0.0891, -0.0854, -0.0786, -0.0684, -0.0561, -0.0414, -0.0255, -0.0086, 0.0087, 0.0253, 0.0406, 0.0542, 0.0657, 0.0742, 0.0796, 0.0818, 0.0807, 0.0767, 0.0697, 0.0601, 0.048, 0.0344, 0.0197, 0.004, -0.0113, -0.0265, -0.04, -0.0518, -0.0615, -0.0686, -0.0728, -0.0736, -0.0719, -0.0671, -0.06, -0.0505, -0.0391, -0.0263, -0.0127, 0.0012, 0.0151, 0.0281, 0.0397, 0.05, 0.0578, 0.0631, 0.0658, 0.0657, 0.0629, 0.0577, 0.0503, 0.0413, 0.0306, 0.0189, 0.0065, -0.0058, -0.018, -0.029, -0.0389, -0.047, -0.0531, -0.0568, -0.0583, -0.0574, -0.0541, -0.0489, -0.0419, -0.0333, -0.0237, -0.0133, -0.0022, 0.0084, 0.0189, 0.0283, 0.0363, 0.0427, 0.047, 0.0499, 0.0506, 0.0494, 0.0461, 0.0417, 0.0354, 0.0281, 0.0194, 0.0105, 0.0011, -0.0083, -0.0168, -0.0248, -0.0313, -0.0367, -0.0405, -0.0424, -0.0424, -0.041, -0.038, -0.0338, -0.0282, -0.0219, -0.0147, -0.007, 0.0008, 0.0082, 0.0154, 0.0216, 0.0271, 0.031, 0.0337, 0.0346, 0.0344, 0.0329, 0.03, 0.0264, 0.0217, 0.0163, 0.0105, 0.0043, -0.0021, -0.0078, -0.0131, -0.0179, -0.0219, -0.0247, -0.0265, -0.027, -0.0264, -0.0247, -0.0226, -0.0196, -0.0159, -0.0119, -0.0073, -0.0025, 0.0019, 0.0062, 0.0103, 0.0134, 0.0159, 0.018, 0.019, 0.0192, 0.0186, 0.0175, 0.0159, 0.0136, 0.011, 0.0084, 0.0055, 0.0025, -0.0009, -0.0032, -0.0059, -0.0081, -0.0098, -0.0107, -0.0113, -0.0112, -0.0109, -0.0101, -0.0094, -0.0083, -0.0072, -0.0056, -0.0041, -0.0027, -0.0013, 0.0, 0.0013, 0.002, 0.0029, 0.0032, 0.0033, 0.0036, 0.0034, 0.0032, 0.0033, 0.0033, 0.0034, 0.0036, 0.0032, 0.0035, 0.0034, 0.0034, 0.0035, 0.0034, 0.0034, 0.0034, 0.0033, 0.0034, 0.0036, 0.0035, 0.0033, 0.0033, 0.0032, 0.0034, 0.0033, 0.0033, 0.0036, 0.0036, 0.0033, 0.0033, 0.0034, 0.0033, 0.0034, 0.0033, 0.0033, 0.0034, 0.0035, 0.0032, 0.0033, 0.0033, 0.0034, 0.0035, 0.0035, 0.0034, 0.0033, 0.0035, 0.0033, 0.0032, 0.0035, 0.0034, 0.0034, 0.0033, 0.0034, 0.0034, 0.0034, 0.0033, 0.0034, 0.0032, 0.0032, 0.0033, 0.0034, 0.0033, 0.0033, 0.0032, 0.0034, 0.0033, 0.0032, 0.0033, 0.0032, 0.0033, 0.0035, 0.0032, 0.0034, 0.0032, 0.0034, 0.0035, 0.0034, 0.0035, 0.0033, 0.0032, 0.0033, 0.0033, 0.0033, 0.0034, 0.0031, 0.0032, 0.0033, 0.0033, 0.0034, 0.0036, 0.0033, 0.0032, 0.0034, 0.0034, 0.0033, 0.0034, 0.0033, 0.0033, 0.0032, 0.0033, 0.0034, 0.0033, 0.0032, 0.0034, 0.0032, 0.0034, 0.0034, 0.0031]
xdat=np.array(xdat)

tdat=[0.0, 0.0401, 0.0802, 0.1202, 0.1603, 0.2004, 0.2405, 0.2806, 0.3206, 0.3607, 0.4008, 0.4409, 0.481, 0.521, 0.5611, 0.6012, 0.6413, 0.6814, 0.7214, 0.7615, 0.8016, 0.8417, 0.8818, 0.9218, 0.9619, 1.002, 1.0421, 1.0822, 1.1222, 1.1623, 1.2024, 1.2425, 1.2826, 1.3226, 1.3627, 1.4028, 1.4429, 1.483, 1.523, 1.5631, 1.6032, 1.6433, 1.6834, 1.7234, 1.7635, 1.8036, 1.8437, 1.8838, 1.9238, 1.9639, 2.004, 2.0441, 2.0842, 2.1242, 2.1643, 2.2044, 2.2445, 2.2846, 2.3246, 2.3647, 2.4048, 2.4449, 2.485, 2.5251, 2.5651, 2.6052, 2.6453, 2.6854, 2.7255, 2.7655, 2.8056, 2.8457, 2.8858, 2.9259, 2.9659, 3.006, 3.0461, 3.0862, 3.1263, 3.1663, 3.2064, 3.2465, 3.2866, 3.3267, 3.3667, 3.4068, 3.4469, 3.487, 3.5271, 3.5671, 3.6072, 3.6473, 3.6874, 3.7275, 3.7675, 3.8076, 3.8477, 3.8878, 3.9279, 3.9679, 4.008, 4.0481, 4.0882, 4.1283, 4.1683, 4.2084, 4.2485, 4.2886, 4.3287, 4.3687, 4.4088, 4.4489, 4.489, 4.5291, 4.5691, 4.6092, 4.6493, 4.6894, 4.7295, 4.7695, 4.8096, 4.8497, 4.8898, 4.9299, 4.9699, 5.01, 5.0501, 5.0902, 5.1303, 5.1703, 5.2104, 5.2505, 5.2906, 5.3307, 5.3707, 5.4108, 5.4509, 5.491, 5.5311, 5.5711, 5.6112, 5.6513, 5.6914, 5.7315, 5.7715, 5.8116, 5.8517, 5.8918, 5.9319, 5.9719, 6.012, 6.0521, 6.0922, 6.1323, 6.1723, 6.2124, 6.2525, 6.2926, 6.3327, 6.3727, 6.4128, 6.4529, 6.493, 6.5331, 6.5731, 6.6132, 6.6533, 6.6934, 6.7335, 6.7735, 6.8136, 6.8537, 6.8938, 6.9339, 6.9739, 7.014, 7.0541, 7.0942, 7.1343, 7.1743, 7.2144, 7.2545, 7.2946, 7.3347, 7.3747, 7.4148, 7.4549, 7.495, 7.5351, 7.5752, 7.6152, 7.6553, 7.6954, 7.7355, 7.7756, 7.8156, 7.8557, 7.8958, 7.9359, 7.976, 8.016, 8.0561, 8.0962, 8.1363, 8.1764, 8.2164, 8.2565, 8.2966, 8.3367, 8.3768, 8.4168, 8.4569, 8.497, 8.5371, 8.5772, 8.6172, 8.6573, 8.6974, 8.7375, 8.7776, 8.8176, 8.8577, 8.8978, 8.9379, 8.978, 9.018, 9.0581, 9.0982, 9.1383, 9.1784, 9.2184, 9.2585, 9.2986, 9.3387, 9.3788, 9.4188, 9.4589, 9.499, 9.5391, 9.5792, 9.6192, 9.6593, 9.6994, 9.7395, 9.7796, 9.8196, 9.8597, 9.8998, 9.9399, 9.98, 10.02, 10.0601, 10.1002, 10.1403, 10.1804, 10.2204, 10.2605, 10.3006, 10.3407, 10.3808, 10.4208, 10.4609, 10.501, 10.5411, 10.5812, 10.6212, 10.6613, 10.7014, 10.7415, 10.7816, 10.8216, 10.8617, 10.9018, 10.9419, 10.982, 11.022, 11.0621, 11.1022, 11.1423, 11.1824, 11.2224, 11.2625, 11.3026, 11.3427, 11.3828, 11.4228, 11.4629, 11.503, 11.5431, 11.5832, 11.6232, 11.6633, 11.7034, 11.7435, 11.7836, 11.8236, 11.8637, 11.9038, 11.9439, 11.984, 12.024, 12.0641, 12.1042, 12.1443, 12.1844, 12.2244, 12.2645, 12.3046, 12.3447, 12.3848, 12.4248, 12.4649, 12.505, 12.5451, 12.5852, 12.6253, 12.6653, 12.7054, 12.7455, 12.7856, 12.8257, 12.8657, 12.9058, 12.9459, 12.986, 13.0261, 13.0661, 13.1062, 13.1463, 13.1864, 13.2265, 13.2665, 13.3066, 13.3467, 13.3868, 13.4269, 13.4669, 13.507, 13.5471, 13.5872, 13.6273, 13.6673, 13.7074, 13.7475, 13.7876, 13.8277, 13.8677, 13.9078, 13.9479, 13.988, 14.0281, 14.0681, 14.1082, 14.1483, 14.1884, 14.2285, 14.2685, 14.3086, 14.3487, 14.3888, 14.4289, 14.4689, 14.509, 14.5491, 14.5892, 14.6293, 14.6693, 14.7094, 14.7495, 14.7896, 14.8297, 14.8697, 14.9098, 14.9499, 14.99, 15.0301, 15.0701, 15.1102, 15.1503, 15.1904, 15.2305, 15.2705, 15.3106, 15.3507, 15.3908, 15.4309, 15.4709, 15.511, 15.5511, 15.5912, 15.6313, 15.6713, 15.7114, 15.7515, 15.7916, 15.8317, 15.8717, 15.9118, 15.9519, 15.992, 16.0321, 16.0721, 16.1122, 16.1523, 16.1924, 16.2325, 16.2725, 16.3126, 16.3527, 16.3928, 16.4329, 16.4729, 16.513, 16.5531, 16.5932, 16.6333, 16.6733, 16.7134, 16.7535, 16.7936, 16.8337, 16.8737, 16.9138, 16.9539, 16.994, 17.0341, 17.0741, 17.1142, 17.1543, 17.1944, 17.2345, 17.2745, 17.3146, 17.3547, 17.3948, 17.4349, 17.4749, 17.515, 17.5551, 17.5952, 17.6353, 17.6754, 17.7154, 17.7555, 17.7956, 17.8357, 17.8758, 17.9158, 17.9559, 17.996, 18.0361, 18.0762, 18.1162, 18.1563, 18.1964, 18.2365, 18.2766, 18.3166, 18.3567, 18.3968, 18.4369, 18.477, 18.517, 18.5571, 18.5972, 18.6373, 18.6774, 18.7174, 18.7575, 18.7976, 18.8377, 18.8778, 18.9178, 18.9579, 18.998, 19.0381, 19.0782, 19.1182, 19.1583, 19.1984, 19.2385, 19.2786, 19.3186, 19.3587, 19.3988, 19.4389, 19.479, 19.519, 19.5591, 19.5992, 19.6393, 19.6794, 19.7194, 19.7595, 19.7996, 19.8397, 19.8798, 19.9198, 19.9599, 20.0]
tdat=np.array(tdat)

# model parameters
m = 30     # mass (kg)
g=9.81 #Gravity
mu=0.04   #Coulomb friction coefficient
k = 750     # spring constant (N/m)
gamma = 0.04  # damping coefficient (kg/s)
x0 = xdat[0]    # initial position (m)
v0 = 0. # initial velocity (m/s)
y0 = [x0, v0]

# numerical paramters
T_end = 10 # (s)
n_steps = 50000
t_span = (tdat[0], tdat[-1])
t_eval = np.linspace(t_span[0], t_span[1], n_steps)
initial_guess = [0.04 , 0.04]
bounds = [(0 , 1) , (0 , 1) ]

#from question 5
def system(t, y,mu,gamma): #spring system
    x, v = y
    friction=-mu*m*g*np.sign(v)
    drag=-gamma *v*abs(v)
    spring_force=-k*x
    total_force=friction+drag+spring_force
    a=total_force/m #acceleration
    return [v,a]

def error(parameters):
    mu_fit,gamma_fit=parameters
    sol=solve_ivp(system,t_span,y0,t_eval = tdat,args=(mu_fit,gamma_fit), method='RK45')
    error=np.sum((sol.y[0]-xdat)**2)
    return error

result=minimize(error, initial_guess, bounds=bounds)
mu_fit,gamma_fit=result.x

sol = solve_ivp(system, t_span, y0, t_eval = tdat,args=(mu_fit,gamma_fit), method='RK45')


# position plot
plt.figure(figsize=(16, 8))
plt.plot(tdat,xdat, 'o', label='Observed Data', markersize=3)
plt.plot(sol.t, sol.y[0], label="fitted Model")
plt.xlabel('Time (s)')
plt.ylabel('Position (m)')
plt.title('Mass Spring Fit')
plt.legend()
plt.show()